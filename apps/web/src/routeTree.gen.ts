/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './app/__root'
import { Route as SignupRouteImport } from './app/signup'
import { Route as ResetPasswordRouteImport } from './app/reset-password'
import { Route as RecoverRouteImport } from './app/recover'
import { Route as NewOrganizationRouteImport } from './app/new-organization'
import { Route as LoginRouteImport } from './app/login'
import { Route as ForgotPasswordRouteImport } from './app/forgot-password'
import { Route as IndexRouteImport } from './app/index'
import { Route as OIndexRouteImport } from './app/o.index'
import { Route as OOrganizationSlugRouteImport } from './app/o.$organizationSlug'
import { Route as AcceptInviteInvitationIdRouteImport } from './app/accept-invite.$invitationId'
import { Route as OOrganizationSlugIndexRouteImport } from './app/o.$organizationSlug.index'
import { Route as OOrganizationSlugTodosRouteImport } from './app/o.$organizationSlug.todos'
import { Route as OOrganizationSlugSettingsRouteImport } from './app/o.$organizationSlug.settings'
import { Route as ApiAuthSplatRouteImport } from './app/api/auth.$'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const ResetPasswordRoute = ResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRouteImport,
} as any)
const RecoverRoute = RecoverRouteImport.update({
  id: '/recover',
  path: '/recover',
  getParentRoute: () => rootRouteImport,
} as any)
const NewOrganizationRoute = NewOrganizationRouteImport.update({
  id: '/new-organization',
  path: '/new-organization',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ForgotPasswordRoute = ForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OIndexRoute = OIndexRouteImport.update({
  id: '/o/',
  path: '/o/',
  getParentRoute: () => rootRouteImport,
} as any)
const OOrganizationSlugRoute = OOrganizationSlugRouteImport.update({
  id: '/o/$organizationSlug',
  path: '/o/$organizationSlug',
  getParentRoute: () => rootRouteImport,
} as any)
const AcceptInviteInvitationIdRoute =
  AcceptInviteInvitationIdRouteImport.update({
    id: '/accept-invite/$invitationId',
    path: '/accept-invite/$invitationId',
    getParentRoute: () => rootRouteImport,
  } as any)
const OOrganizationSlugIndexRoute = OOrganizationSlugIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => OOrganizationSlugRoute,
} as any)
const OOrganizationSlugTodosRoute = OOrganizationSlugTodosRouteImport.update({
  id: '/todos',
  path: '/todos',
  getParentRoute: () => OOrganizationSlugRoute,
} as any)
const OOrganizationSlugSettingsRoute =
  OOrganizationSlugSettingsRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => OOrganizationSlugRoute,
  } as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/new-organization': typeof NewOrganizationRoute
  '/recover': typeof RecoverRoute
  '/reset-password': typeof ResetPasswordRoute
  '/signup': typeof SignupRoute
  '/accept-invite/$invitationId': typeof AcceptInviteInvitationIdRoute
  '/o/$organizationSlug': typeof OOrganizationSlugRouteWithChildren
  '/o': typeof OIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/o/$organizationSlug/settings': typeof OOrganizationSlugSettingsRoute
  '/o/$organizationSlug/todos': typeof OOrganizationSlugTodosRoute
  '/o/$organizationSlug/': typeof OOrganizationSlugIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/new-organization': typeof NewOrganizationRoute
  '/recover': typeof RecoverRoute
  '/reset-password': typeof ResetPasswordRoute
  '/signup': typeof SignupRoute
  '/accept-invite/$invitationId': typeof AcceptInviteInvitationIdRoute
  '/o': typeof OIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/o/$organizationSlug/settings': typeof OOrganizationSlugSettingsRoute
  '/o/$organizationSlug/todos': typeof OOrganizationSlugTodosRoute
  '/o/$organizationSlug': typeof OOrganizationSlugIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/new-organization': typeof NewOrganizationRoute
  '/recover': typeof RecoverRoute
  '/reset-password': typeof ResetPasswordRoute
  '/signup': typeof SignupRoute
  '/accept-invite/$invitationId': typeof AcceptInviteInvitationIdRoute
  '/o/$organizationSlug': typeof OOrganizationSlugRouteWithChildren
  '/o/': typeof OIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/o/$organizationSlug/settings': typeof OOrganizationSlugSettingsRoute
  '/o/$organizationSlug/todos': typeof OOrganizationSlugTodosRoute
  '/o/$organizationSlug/': typeof OOrganizationSlugIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/new-organization'
    | '/recover'
    | '/reset-password'
    | '/signup'
    | '/accept-invite/$invitationId'
    | '/o/$organizationSlug'
    | '/o'
    | '/api/auth/$'
    | '/o/$organizationSlug/settings'
    | '/o/$organizationSlug/todos'
    | '/o/$organizationSlug/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/new-organization'
    | '/recover'
    | '/reset-password'
    | '/signup'
    | '/accept-invite/$invitationId'
    | '/o'
    | '/api/auth/$'
    | '/o/$organizationSlug/settings'
    | '/o/$organizationSlug/todos'
    | '/o/$organizationSlug'
  id:
    | '__root__'
    | '/'
    | '/forgot-password'
    | '/login'
    | '/new-organization'
    | '/recover'
    | '/reset-password'
    | '/signup'
    | '/accept-invite/$invitationId'
    | '/o/$organizationSlug'
    | '/o/'
    | '/api/auth/$'
    | '/o/$organizationSlug/settings'
    | '/o/$organizationSlug/todos'
    | '/o/$organizationSlug/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ForgotPasswordRoute: typeof ForgotPasswordRoute
  LoginRoute: typeof LoginRoute
  NewOrganizationRoute: typeof NewOrganizationRoute
  RecoverRoute: typeof RecoverRoute
  ResetPasswordRoute: typeof ResetPasswordRoute
  SignupRoute: typeof SignupRoute
  AcceptInviteInvitationIdRoute: typeof AcceptInviteInvitationIdRoute
  OOrganizationSlugRoute: typeof OOrganizationSlugRouteWithChildren
  OIndexRoute: typeof OIndexRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reset-password': {
      id: '/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recover': {
      id: '/recover'
      path: '/recover'
      fullPath: '/recover'
      preLoaderRoute: typeof RecoverRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/new-organization': {
      id: '/new-organization'
      path: '/new-organization'
      fullPath: '/new-organization'
      preLoaderRoute: typeof NewOrganizationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forgot-password': {
      id: '/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof ForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/o/': {
      id: '/o/'
      path: '/o'
      fullPath: '/o'
      preLoaderRoute: typeof OIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/o/$organizationSlug': {
      id: '/o/$organizationSlug'
      path: '/o/$organizationSlug'
      fullPath: '/o/$organizationSlug'
      preLoaderRoute: typeof OOrganizationSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/accept-invite/$invitationId': {
      id: '/accept-invite/$invitationId'
      path: '/accept-invite/$invitationId'
      fullPath: '/accept-invite/$invitationId'
      preLoaderRoute: typeof AcceptInviteInvitationIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/o/$organizationSlug/': {
      id: '/o/$organizationSlug/'
      path: '/'
      fullPath: '/o/$organizationSlug/'
      preLoaderRoute: typeof OOrganizationSlugIndexRouteImport
      parentRoute: typeof OOrganizationSlugRoute
    }
    '/o/$organizationSlug/todos': {
      id: '/o/$organizationSlug/todos'
      path: '/todos'
      fullPath: '/o/$organizationSlug/todos'
      preLoaderRoute: typeof OOrganizationSlugTodosRouteImport
      parentRoute: typeof OOrganizationSlugRoute
    }
    '/o/$organizationSlug/settings': {
      id: '/o/$organizationSlug/settings'
      path: '/settings'
      fullPath: '/o/$organizationSlug/settings'
      preLoaderRoute: typeof OOrganizationSlugSettingsRouteImport
      parentRoute: typeof OOrganizationSlugRoute
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface OOrganizationSlugRouteChildren {
  OOrganizationSlugSettingsRoute: typeof OOrganizationSlugSettingsRoute
  OOrganizationSlugTodosRoute: typeof OOrganizationSlugTodosRoute
  OOrganizationSlugIndexRoute: typeof OOrganizationSlugIndexRoute
}

const OOrganizationSlugRouteChildren: OOrganizationSlugRouteChildren = {
  OOrganizationSlugSettingsRoute: OOrganizationSlugSettingsRoute,
  OOrganizationSlugTodosRoute: OOrganizationSlugTodosRoute,
  OOrganizationSlugIndexRoute: OOrganizationSlugIndexRoute,
}

const OOrganizationSlugRouteWithChildren =
  OOrganizationSlugRoute._addFileChildren(OOrganizationSlugRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ForgotPasswordRoute: ForgotPasswordRoute,
  LoginRoute: LoginRoute,
  NewOrganizationRoute: NewOrganizationRoute,
  RecoverRoute: RecoverRoute,
  ResetPasswordRoute: ResetPasswordRoute,
  SignupRoute: SignupRoute,
  AcceptInviteInvitationIdRoute: AcceptInviteInvitationIdRoute,
  OOrganizationSlugRoute: OOrganizationSlugRouteWithChildren,
  OIndexRoute: OIndexRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
