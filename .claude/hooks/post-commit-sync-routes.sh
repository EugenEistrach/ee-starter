#!/bin/bash

# Read the tool input from stdin
input=$(cat)

# Extract command for Bash tool
command=$(echo "$input" | jq -r '.tool_input.command // empty')

# Exit if no command
if [ -z "$command" ]; then
  exit 0
fi

# Check if this is a git commit command
if [[ "$command" == *"git commit"* ]] || [[ "$command" == *"git add"*"git commit"* ]]; then
  # Check if route files were modified in the staging area
  if git diff --cached --name-only | grep -qE "apps/web/src/app/.*\.(tsx|ts)$"; then
    echo "ðŸ”„ Routes changed, regenerating reserved-routes.ts..." >&2
    
    # Trigger the Vite plugin to regenerate (by touching the routeTree file if it exists)
    if [ -f "apps/web/src/routeTree.gen.ts" ]; then
      # Run the sync manually using Node
      node -e "
        const { readFileSync, writeFileSync } = require('fs');
        const { resolve } = require('path');
        
        const routeTreePath = resolve(process.cwd(), 'apps/web/src/routeTree.gen.ts');
        const outputPath = resolve(process.cwd(), 'packages/backend/convex/reserved-routes.ts');
        
        try {
          const content = readFileSync(routeTreePath, 'utf-8');
          const fullPathRegex = /fullPath:\\s*'([^']+)'/g;
          const paths = new Set();
          
          let match;
          while ((match = fullPathRegex.exec(content)) !== null) {
            const fullPath = match[1];
            if (!fullPath || fullPath === '/') continue;
            
            const firstSegment = fullPath.split('/').filter(Boolean)[0];
            if (firstSegment && !firstSegment.includes('\$')) {
              paths.add(firstSegment);
            }
          }
          
          const sortedPaths = Array.from(paths).sort();
          const pathsArray = sortedPaths.map(path => \`  '\${path}'\`).join(',\\n');
          const fileContent = \`// This file is auto-generated by vite-plugin-sync-routes
// DO NOT EDIT MANUALLY - Changes will be overwritten

/**
 * Reserved route names from the frontend application.
 * These names should not be used for dynamic user-generated slugs.
 */
export const RESERVED_ROUTE_NAMES = [
\${pathsArray},
] as const

/**
 * Check if a name is a reserved route name.
 * @param name - The name to check
 * @returns true if the name is reserved, false otherwise
 */
export function isReservedRouteName(name: string): boolean {
  return RESERVED_ROUTE_NAMES.includes(name as typeof RESERVED_ROUTE_NAMES[number])
}
\`;
          
          writeFileSync(outputPath, fileContent, 'utf-8');
          console.log('âœ“ Synced ' + sortedPaths.length + ' route names to backend');
        } catch (error) {
          console.error('Failed to sync routes:', error);
          process.exit(1);
        }
      "
      
      # Add the regenerated file back to staging
      if [ -f "packages/backend/convex/reserved-routes.ts" ]; then
        git add packages/backend/convex/reserved-routes.ts
        echo "âœ… Added reserved-routes.ts to commit" >&2
        exit 2
      fi
    fi
  fi
fi

exit 0
